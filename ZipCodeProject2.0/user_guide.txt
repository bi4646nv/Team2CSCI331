User Guide for ZipCodeProject 2.0
---------------------------------
1. Introduction
-----
   The first part of this two-part C++ application processes Zip Code and Place Name data from two different CSV
   files (both contain the same information, but one is sorted by zip code, while the other is random sorted), 
   organizing it by state and finding:
    - Easternmost Zip Code/Place Name (least longitude)
    - Westernmost Zip Code/Place Name (greatest longitude)
    - Southernmost Zip Code/Place Name (least latitude)
    - Northernmost Zip Code/Place Name (greatest latitude)

   Throughout the first part, the application converts the original CSV files, us_postal_codes.csv and
   us_postal_codes_length.csv, to length indicated CSV files, starting with 15-line headers.

   The headers contain this information: 
    - file structure type
    - version of your file structure type (we may add features in subsequent versions)
    - header record size in bytes
    - count of bytes for each record size integer (if fixed-size)
    - size format type {ASCII or binary}
    - primary key index file name
    - record count
    - count of fields per record
      for each field:
       - name or ID
       - type schema
         - (format to read or write)
    - indicate (ordinally) which data field serves as the primary key


   The second part of this application focuses on efficient record lookup by using a primary key index. After the
   length-indicated CSV files are generated in Part I, the application builds a primary key index file
   (zip_index.txt) from said CSV input file and by saving each zip code's corresponding byte offset to enable direct
   access. Record lookup is done by telling the program a zipcode to search for and then finding its byte offset.

---------------------------------
2. Converter Program (Part I)
-----
   To compile the converter, enter this command:
   "g++ -o converter CSVConverterMain.cpp CSVConverter.cpp HeaderBuffer.cpp"
   To run, enter this command:
   "./converter"

   The converter takes the two input CSV files:
    - us_postal_codes.csv (sorted by zipcode)
    - us_postal_codes_random.csv (random order)
   
   and converts them into:
    - us_postal_codes_length.csv
    - us_postal_codes_random_length.csv
   
   These converted files contain:
   - A structured header with metadata
   - A series of length-indicated records using a 2-digit ASCII prefix

   The header information is explained in the Introduction above and they are read in the processor program below.

---------------------------------
3. Zip Processor Program (Part I)
-----
   To compile the zip processor, enter this command:
   "g++ -o zip_processor main.cpp Buffer.cpp HeaderBuffer.cpp"
   To run, enter this command:
   "./zip_processor"

   Upon running, the user will be prompted as such:
   "Select data file:
   1 - us_postal_codes_length.csv
   2 - us_postal_codes_random_length.csv"
   This allows the user to pick which input file to use to generate the table. This does not matter output-wise, 
   but it is important for showing that the program works for either input.

   Following this, the header information is read and wrote to the output like so:
   "=== File Header ===
   File Type: ZipCodeData
   Version: 1
   Header Size: 84
   Record Size Bytes: 2
   Size Format: ASCII
   Index File: zip_index.txt
   Record Count: 40933
   Field Count: 6
   Fields:
     1. zip_code (int)
     2. place_name (string)
     3. state (string)
     4. county (string)
     5. lat (double)
     6. lon (double)
   Primary Key Field: 1
   ==================="

   Finally, the user is prompted as such:
   "Do you want to sort by Zip Code (Z) or Place Name (P): "
   This allows for the user to specify whether the data should be sorted by Zip Code or Place Name.
   If the user does not enter 'Z' or 'P' (not case sensitive), the program will continue prompting the user.
    
   The results are written to:
    - SortedLocations.txt (formatted text output)
    - SortedLocations.csv (CSV output)

   Termination message upon program completion:
   "Output written to SortedLocations.txt and SortedLocations.csv"

---------------------------------
4. Zip Indexing/Search Programs (Part II)
-----
   There are two programs for part II, one that creates the index and one that searches said index.
   
   To compile the zip index builder, enter this command:
   "g++ -o zipIndexBuilder ZipIndexBuilder.cpp ZipIndex.cpp"
   To run, enter this command:
   "./zipIndexBuilder us_postal_codes_length.csv zip_index.txt"

   'us_postal_codes_length.csv' or 'us_postal_codes_random_length.csv' can be used in the ./zipIndexBuilder command
   
   The output of running this program looks like this:
   "Skipping header: ZipCodeData
    Warning: Invalid zip code in line -> zip_code,int
    Warning: Invalid zip code in line -> place_name,string
    Warning: Invalid zip code in line -> state,string
    Warning: Invalid zip code in line -> county,string
    Warning: Invalid zip code in line -> lat,double
    Warning: Invalid zip code in line -> lon,double
   ‚úÖ Indexed Zip Code: 00501 at offset 129
   ‚úÖ Indexed Zip Code: 00544 at offset 175
   ‚úÖ Indexed Zip Code: 01001 at offset 221
   ...
   ‚úÖ Indexed Zip Code: 99929 at offset 1924287
   ‚úÖ Indexed Zip Code: 99950 at offset 1924349
   ‚úÖ Indexing complete. Total entries: 40933
   Index successfully saved to zip_index.txt
    Index created from us_postal_codes_length.csv and saved as zip_index.txt"

   It is important to know that the 15 line header is skipped, although it does throw warnings. This could be fixed
   in a future version.


   To compile the zip search program, enter this command:
   "g++ -o zipSearch ZipSearch.cpp ZipIndex.cpp"
   To run, enter this command:
   "./zipSearch us_postal_codes_length.csv zip_index.txt -Z01001"

   The run command does the searching, so "-Z01001" would need to be changed to search for a different zip code.
   For example, to search for the zip code 56301, the user would enter:
   "./zipSearch us_postal_codes_length.csv zip_index.txt -Z56301"

   The output of running this program looks like this:
   üîç Searching for ZIP code: 56301
   üì• Loading index from zip_index.txt
    Index loaded successfully with 40933 entries.
   Seeking to file position: 1113367
   ZIP Code Record: 44,56301,Saint Cloud,MN,Stearns,45.541,-94.1819

---------------------------------
5. Extra Information and Documentation
-----
   The Zip Indexing/Search Programs do not depend on the Zip Processor program and vice versa.
   
   We designed the program based on the 'Preliminary Design Document.pdf'.
   Documentation done through Doxygen can be seen in 'Doxygen Documentation.pdf'.
   Testing can be seen in 'Test Document.pdf'.

   Group Members: Thomas Herold, Anastasiya Gorlov, Amen Begashaw, David Devney, and Yvonne Onmakpo