User Guide for ZipCodeProject3.0
--------------------------------
1. Introduction
-----
This version builds upon previous versions by implementing a Blocked Sequence Set (BSS) file structure for storing
and managing Zip Code records. The application organizes Zip Code data into fixed-size blocks, supports insertions
and deletions, and uses an index to speed up record access.

Key features of the program:
- Converting the CSV file that stores the zip codes into a BSS data file.
- Storing the data in blocks of fixed size with record and block metadata.
- Creating and using an index file that maps the highest Zip Code in each block to its Relative Block Number (RBN),
  allowing for fast and easy searching.
- Inserting and deleting Zip Code records efficiently using block splitting and avail list reuse.
- Dumping the file structure both physically and logically for analysis and debugging.

---------------------------------
2. Blocked Sequence Set (BSS) Program
-----
To compile the BSS creation and manager tool, enter `g++ -o zipcode_bss Main.cpp` in the command line.
To create a new BSS file from a CSV, enter `./zipcode_bss create us_postal_codes.csv zipcode_data.dat 
zipcode_index.dat 512` in the command line, where;
- us_postal_codes.csv is the original data file
- zipcode_data.dat is the BSS data file created
- zipcode_index.dat is the index file
- 512 is the block size in bytes
---

To dump the physical structure of the file, enter `./zipcode_bss dump zipcode_data.dat zipcode_index.dat physical` in
the command line.
To dump the logical structure of the file, enter `./zipcode_bss dump zipcode_data.dat zipcode_index.dat logical` in
the command line.
The logical dump follows the nextBlockRBN pointers, while the physical dump lists blocks in file order.
These dumps show:
- Block RBNs
- Zip Codes in each block
- Predecessor and successor RBNs
- Avail list structure
Logical dumps are outputted to the terminal and `dump_logical.txt`. Physical dumps are outputted to the terminal and 
`dump_physical.txt`.

Example Format:
RBN 000  00501 00544 01001 -> 1
RBN 001  01002 01003 01004 -> 2
...
RBN 005  *available*     -> -1
This makes it easy to verify changes after insertions or deletions.
---

To search for records using the index 56301 (for example; it works with any zip code), enter `./zipcode_bss search
zipcode_data.dat zipcode_index.dat -Z56301` in the command line.

Example output:
      Searching for zip code 56301...
      Block RBN being searched: 2210
         contains zip: [56297]
         contains zip: [56301]
         ...
      Found:
      Zip Code: 56301
      City: Saint Cloud
      State: MN
      County: Stearns
      Latitude: 45.541
      Longitude: -94.1819
---

To insert records from a CSV file, enter `./zipcode_bss insert zipcode_data.dat zipcode_index.dat test_insert.csv`
in the command line. `test_insert.csv` is interchangeable with any other file of Zip Code records.
Each line in test_insert.csv must match the original CSV format, `ZipCode,City,State,County,Latitude,Longitude`
If a block is full during insertion;
- It is split into two blocks.
- The avail list is checked first to reuse space.
- The index is updated accordingly.
- To delete records using a text file of Zip Codes:
---

To delete records using a text file of Zip Codes, enter `./zipcode_bss delete zipcode_data.dat zipcode_index.dat
test_delete.txt` in the command line. `test_delete.txt` is interchangeable with any other file of Zip Codes.
Each line in test_delete.txt contains a single Zip Code to delete. No other field is needed besides the Zip Code.
Records are removed, blocks are updated, and if a block becomes empty, it is added to the avail list.

---------------------------------
3. Extra Information
-----

   Group Members: Thomas Herold, Anastasiya Gorlov, Amen Begashaw, David Devney, and Yvonne Onmakpo






The User Guide below still works for ZipCodeProject3.0, since all the files are included in the ZipCodeProject3.0
repository that allow the legacy programs to still work. The guide below is from ZipCodeProject2.0, which was
built off of ZipCodeProject1.0.

(Legacy) User Guide for ZipCodeProject
--------------------------------------------------
1. Introduction
-----
   The first part of this two-part C++ application processes Zip Code and Place Name data from two different CSV
   files (both contain the same information, but one is sorted by zip code, while the other is random sorted), 
   organizing it by state and finding:
    - Easternmost Zip Code/Place Name (least longitude)
    - Westernmost Zip Code/Place Name (greatest longitude)
    - Southernmost Zip Code/Place Name (least latitude)
    - Northernmost Zip Code/Place Name (greatest latitude)

   Throughout the first part, the application converts the original CSV files, us_postal_codes.csv and
   us_postal_codes_length.csv, to length indicated CSV files, starting with 15-line headers.

   The headers contain this information: 
    - file structure type
    - version of your file structure type (we may add features in subsequent versions)
    - header record size in bytes
    - count of bytes for each record size integer (if fixed-size)
    - size format type {ASCII or binary}
    - primary key index file name
    - record count
    - count of fields per record
      for each field:
       - name or ID
       - type schema
         - (format to read or write)
    - indicate (ordinally) which data field serves as the primary key


   The second part of this application focuses on efficient record lookup by using a primary key index. After the
   length-indicated CSV files are generated in Part I, the application builds a primary key index file
   (zip_index.txt) from said CSV input file and by saving each zip code's corresponding byte offset to enable direct
   access. Record lookup is done by telling the program a zipcode to search for and then finding its byte offset.

---------------------------------
2. Converter Program (Part I)
-----
   To compile the converter, enter this command:
   "g++ -o converter CSVConverterMain.cpp CSVConverter.cpp HeaderBuffer.cpp"
   To run, enter this command:
   "./converter"

   The converter takes the two input CSV files:
    - us_postal_codes.csv (sorted by zipcode)
    - us_postal_codes_random.csv (random order)
   
   and converts them into:
    - us_postal_codes_length.csv
    - us_postal_codes_random_length.csv
   
   These converted files contain:
   - A structured header with metadata
   - A series of length-indicated records using a 2-digit ASCII prefix

   The header information is explained in the Introduction above and they are read in the processor program below.

---------------------------------
3. Zip Processor Program (Part I)
-----
   To compile the zip processor, enter this command:
   "g++ -o zip_processor main.cpp Buffer.cpp HeaderBuffer.cpp"
   To run, enter this command:
   "./zip_processor"

   Upon running, the user will be prompted as such:
   "Select data file:
   1 - us_postal_codes_length.csv
   2 - us_postal_codes_random_length.csv"
   This allows the user to pick which input file to use to generate the table. This does not matter output-wise, 
   but it is important for showing that the program works for either input.

   Following this, the header information is read and wrote to the output like so:
   "=== File Header ===
   File Type: ZipCodeData
   Version: 1
   Header Size: 84
   Record Size Bytes: 2
   Size Format: ASCII
   Index File: zip_index.txt
   Record Count: 40933
   Field Count: 6
   Fields:
     1. zip_code (int)
     2. place_name (string)
     3. state (string)
     4. county (string)
     5. lat (double)
     6. lon (double)
   Primary Key Field: 1
   ==================="

   Finally, the user is prompted as such:
   "Do you want to sort by Zip Code (Z) or Place Name (P): "
   This allows for the user to specify whether the data should be sorted by Zip Code or Place Name.
   If the user does not enter 'Z' or 'P' (not case sensitive), the program will continue prompting the user.
    
   The results are written to:
    - SortedLocations.txt (formatted text output)
    - SortedLocations.csv (CSV output)

   Termination message upon program completion:
   "Output written to SortedLocations.txt and SortedLocations.csv"

---------------------------------
4. Zip Indexing/Search Programs (Part II)
-----
   There are two programs for part II, one that creates the index and one that searches said index.
   
   To compile the zip index builder, enter this command:
   "g++ -o zipIndexBuilder ZipIndexBuilder.cpp ZipIndex.cpp"
   To run, enter this command:
   "./zipIndexBuilder us_postal_codes_length.csv zip_index.txt"

   'us_postal_codes_length.csv' or 'us_postal_codes_random_length.csv' can be used in the ./zipIndexBuilder command
   
   The output of running this program looks like this:
   "Skipping header: ZipCodeData
    Warning: Invalid zip code in line -> zip_code,int
    Warning: Invalid zip code in line -> place_name,string
    Warning: Invalid zip code in line -> state,string
    Warning: Invalid zip code in line -> county,string
    Warning: Invalid zip code in line -> lat,double
    Warning: Invalid zip code in line -> lon,double
   ✅ Indexed Zip Code: 00501 at offset 129
   ✅ Indexed Zip Code: 00544 at offset 175
   ✅ Indexed Zip Code: 01001 at offset 221
   ...
   ✅ Indexed Zip Code: 99929 at offset 1924287
   ✅ Indexed Zip Code: 99950 at offset 1924349
   ✅ Indexing complete. Total entries: 40933
   Index successfully saved to zip_index.txt
    Index created from us_postal_codes_length.csv and saved as zip_index.txt"

   It is important to know that the 15 line header is skipped, although it does throw warnings. This could be fixed
   in a future version.


   To compile the zip search program, enter this command:
   "g++ -o zipSearch ZipSearch.cpp ZipIndex.cpp"
   To run, enter this command:
   "./zipSearch us_postal_codes_length.csv zip_index.txt -Z01001"

   The run command does the searching, so "-Z01001" would need to be changed to search for a different zip code.
   For example, to search for the zip code 56301, the user would enter:
   "./zipSearch us_postal_codes_length.csv zip_index.txt -Z56301"

   The output of running this program looks like this:
   🔍 Searching for ZIP code: 56301
   📥 Loading index from zip_index.txt
    Index loaded successfully with 40933 entries.
   Seeking to file position: 1113367
   ZIP Code Record: 44,56301,Saint Cloud,MN,Stearns,45.541,-94.1819

---------------------------------
5. Extra Information
-----
   The Zip Indexing/Search Programs do not depend on the Zip Processor program and vice versa.
